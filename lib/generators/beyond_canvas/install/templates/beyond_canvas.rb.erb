# frozen_string_literal: true

BeyondCanvas.setup do |config|
  # Carefully read and fill this configuration file.
  #
  # All uncommented configuration parameters are necessary for proper operation
  # of Beyond Canvas.

  # ==> Engine configuration

  # Set the namespace where the Engine is going to be mounted.
  #
  # config.namespace = '/'

  # Set the url or path where a shop is going to be redirected after a
  # succesful authentication.
  #
  config.open_app_url = nil

  # Set if your app ig going to run as a cockpit app. If you are not sure about
  # this, please contact apps@epages.com.
  #
  # config.cockpit_app = false

  # Set if your app is going to be preinstalled on packages. If you are not sure
  # about this, please contact apps@epages.com.
  #
  # config.preinstalled = false

  # Set if you want to enable the available debug mode Beyond Canvas offers.
  # This options displays a parameter debug as well as some custom Beyond Canvas
  # logs.
  #
  # config.debug_mode = false

  # Set an optional image to be send as email. Accepts any
  # string supported by image_tag's source parameter. Overrides
  # :email_logo.
  #
  # config.email_logo = 'logo.png' # Can't be svg

  # ==> Authorization configuration

  # Set if you want to retrieve the shop token using `grant_type=client_credentials`
  # on development environment. Default is `grant_type=authorization_code`.
  # config.client_credentials = false

  # ==> Site configuration

  # Set the title that is displayed on the main layout.
  #
  config.site_title = '<%= Rails.application.class.name.split("::").first.humanize %>'

  # Set an optional image to be displayed instead of a string. Accepts any
  # string supported by image_tag's source parameter or a SVG file. Overrides
  # :site_title.
  #
  # config.site_logo = 'logo.svg'

  # Set the favicon of the site.
  #
  # config.favicon = 'favicon.ico'

  # Set the menu items that will be displayed on the top of your app.
  # It accepts 3 parameters:
  #   1. name: the text displayed on the link tag. Supports any string or an I18n compatible path.
  #   2. url: the href of the link tag. Supports any string or a symbolized route.
  #   3. options: any html attributes that will be added to the link tag.
  # You can also run `rails g beyond_canvas:custom_menu` to generate a menu template you can override.
  # See examples:
  #
  # config.register_menu_item 'Contact', '/contact/, class: 'contact'
  # config.register_menu_item 'menu_item.about_us', :root_path, class: 'about-us', id: 'about-us'
  # config.register_menu_item 'Our website', 'https://epages.com', target: :_blank

  # ==> Stylesheets & Javascripts

  # We recommend using the built in Beyond Canvas layout and loading up your own
  # stylesheets / javascripts to customize the look and feel.
  #
  # To load a stylesheet:
  # config.register_stylesheet 'my_stylesheet.css'
  #
  # You can provide an options hash for more control, which is passed along
  # to stylesheet_link_tag():
  # config.register_stylesheet 'my_print_stylesheet.css', media: :print
  #
  # To load a javascript file:
  # config.register_javascript 'my_javascript.js'

  # ==> Webpacker

  # By default, Beyond Canvas uses Webpacker.
  # You can switch to using Sprocket's asset pipeline here.
  #
  <% unless @skip_webpacker %># <% end %>config.skip_webpacker = <%= @skip_webpacker %>

  # ==> Database encryption

  config.encryption_key = '<%= SecureRandom.hex(32) %>'

  # Webhooks event listeners
  # You can inculde the beyond
  # By default Beyond canvas is listening for app.unistalled event.

  # URL for get webhooks whe you are using develpment

  # ==> Webhooks

  # By default Beyond Canvas subscribes to `app.uninstalled` webhook event and
  # handles the uninstallation of an app.
  # If you want to subscribe to any of the existing webhooks (`product.created`,
  # `product.updated`, `order.created`, `order.updated`) apart from
  # `app.uninstalled` on app installation process, add them like follows:
  #
  # To subscribe to a single webhook event:
  # config.register_webhook_event('product.created')
  #
  # To subscribe to multiple webhook events:
  # config.register_webhook_events(['product.created', 'product.updated'])

  # Set a URL where webhooks will call on non-production environments. You can
  # make use of https://webhook.site/.
  # On production environments, the URL will be automatically generated.
  config.webhook_site_url = nil
end
